{"version":3,"sources":["here.js","MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["hereCredentials","hereIsolineUrl","coords","options","concat","mode","traffic","range","type","maxIsolineRangeLookup","time","distance","MapContainer","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDrag","coordinates","marker","current","leafletElement","getLatLng","console","log","lat","lng","index","React","createRef","map","inherits","createClass","key","value","react_default","a","createElement","Map","center","zoom","parseInt","zoomControl","ref","TileLayer","url","style","Marker","position","draggable","onDragEnd","polygon","length","Polygon","positions","color","Component","App","updateIsolines","promises","state","maps","m","fetch","then","x","json","Promise","all","res","copy","i","response","isoline","component","shape","split","setState","componentDidMount","slice","hasOwnProperty","handleFormChange","event","option","target","id","name","_this2","max","sliderVal","className","htmlFor","onChange","toLocaleString","min","MapContainer_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e2d1862.chunk.js","sourcesContent":["export const hereCredentials = {\n   id: 'UQ75LhFcnAv0DtOUwBEA',\n   code: 'f5nyezNmYF4wvuJqQgNSkg'\n}\n\nexport const hereIsolineUrl = (coords, options) => `https://isoline.route.api.here.com/routing/7.2/calculateisoline.json?app_id=${hereCredentials.id}&app_code=${hereCredentials.code}&mode=shortest;${options.mode};traffic:${options.traffic}&start=geo!${coords[0]},${coords[1]}&range=${options.range}&rangetype=${options.type}`\n\nexport const hereTileUrl = (style) => `https://2.base.maps.api.here.com/maptile/2.1/maptile/newest/${style}/{z}/{x}/{y}/512/png8?app_id=${hereCredentials.id}&app_code=${hereCredentials.code}&ppi=320`;\n\nexport const maxIsolineRangeLookup = {\n   time: 20000,\n   distance: 400000\n}\n","import React from 'react';\nimport { Map, TileLayer, Marker, Polygon } from 'react-leaflet';\nimport { hereTileUrl } from './here';\n\n\nexport class MapContainer extends React.Component {\n\n   constructor(props) {\n      super(props);\n      this.marker = React.createRef();\n      this.map = React.createRef();\n   }\n\n   handleDrag = () => {\n\n      const coordinates = this.marker.current.leafletElement.getLatLng();\n      console.log(coordinates.lat, coordinates.lng)\n      this.props.handleDrag(this.props.index, [coordinates.lat, coordinates.lng])\n   }\n\n   render() {\n\n      return (\n            <Map\n               center={this.props.center}\n               zoom={parseInt(this.props.options.zoom)}\n               zoomControl={false}\n               ref={this.map}\n            >\n               <TileLayer\n                  url={hereTileUrl(this.props.style)}\n               />\n               <Marker\n                  position={this.props.center}\n                  draggable={true}\n                  onDragEnd={this.handleDrag}\n                  ref={this.marker}\n               />\n               {\n                  this.props.polygon.length > 0 &&\n                  <Polygon\n                     positions={this.props.polygon}\n                     color=\"#2DD5C9\"\n                  />\n               }\n            </Map>\n      )\n   }\n}\n","import React from 'react';\nimport './App.css';\nimport { MapContainer } from './MapContainer';\nimport { hereIsolineUrl, maxIsolineRangeLookup } from './here';\n\n/*\nTODO:\nQuestions for Jayson / React expert\n\n2. Is creating 'copy' the right way to change state\n2. When do I need to use this.function_name = this.function_name.bind(this);\n*/\n\n\n\nclass App extends React.Component {\n\n   constructor(props) {\n      super(props);\n      this.state = {\n         maps: [\n            {\n               name: 'Seattle, WA',\n               coordinates: [47.605779, -122.315744],\n               polygon: []\n            }, {\n               name: 'San Francisco, CA',\n               coordinates: [37.761732, -122.440343],\n               polygon: []\n            }, {\n               name: 'New York City, NY',\n               coordinates: [40.734238, -73.988188],\n               polygon: []\n            }, {\n               name: 'Berlin, Germany',\n               coordinates: [52.520609, 13.409321],\n               polygon: []\n            }, {\n               name: 'Chicago, IL',\n               coordinates: [41.884314, -87.630478],\n               polygon: []\n            }, {\n               name: 'Singapore, Singapore',\n               coordinates: [1.347920, 103.862097],\n               polygon: []\n            }, {\n               name: 'Buenos Aires, Argentina',\n               coordinates: [-34.609855, -58.443259],\n               polygon: []\n            }, {\n               name: 'Johannesburg, South Africa',\n               coordinates: [-26.205689, 28.042450],\n               polygon: []\n            }, {\n               name: 'Hong Kong, SAR China',\n               coordinates: [22.316246, 114.174539],\n               polygon: []\n            }\n         ],\n         options: {\n            zoom: 5,\n            type: 'distance',\n            range: 300000,\n            mode: 'car',\n            traffic: 'disabled',\n            style: 'reduced.day'\n         }\n      }\n   }\n\n   updateIsolines = () => {\n      const promises = this.state.maps.map(m => fetch(hereIsolineUrl(m.coordinates, this.state.options)).then(x => x.json()));\n      Promise.all(promises).then(res => {\n\n         const copy = this.state.maps.map((x, i) => {\n            x.polygon = res[i].response.isoline[0].component[0].shape.map(x => [x.split(',')[0], x.split(',')[1]]);\n            return x;\n         });\n\n         this.setState({\n            maps: copy\n         });\n      })\n   }\n\n   componentDidMount = () => {\n      this.updateIsolines();\n   }\n\n   handleDrag = (index, coordinates) => {\n      fetch(hereIsolineUrl(coordinates, this.state.options))\n      .then(res => res.json())\n      .then(res => {\n\n         const copy = this.state.maps.slice();\n         if (res.hasOwnProperty('response')) {\n            copy[index].polygon = res.response.isoline[0].component[0].shape.map(x => [x.split(',')[0], x.split(',')[1]]);\n            copy[index].coordinates = coordinates;\n         } else {\n            copy[index].polygon = [];\n            copy[index].coordinates = coordinates;\n         }\n         this.setState({\n            maps: copy\n         });\n      });\n   }\n\n   handleFormChange = (event) => {\n\n      const option = event.target.id;\n      const value = event.target.value;\n\n      const copy = this.state.options;\n      if (option === 'type' && this.state.options.range > maxIsolineRangeLookup[value]) {\n         copy.range = maxIsolineRangeLookup[value];\n      }\n      copy[option] = value;\n      this.setState({\n         options: copy\n      }, () => {\n         this.updateIsolines();\n      });\n\n   }\n\n   render() {\n\n      const max = this.state.options.type === 'distance' ?\n         maxIsolineRangeLookup.distance :\n         maxIsolineRangeLookup.time;\n\n      const sliderVal = this.state.options.range > max ? max : this.state.options.range;\n\n      return (\n         <div className=\"app\">\n            <div className=\"controls\">\n               <div>\n                  <label htmlFor=\"type\">Distance or Time</label>\n                  <select id=\"type\" value={this.state.options.type} onChange={this.handleFormChange}>\n                     <option value=\"time\">Seconds</option>\n                     <option value=\"distance\">Meters</option>\n                  </select>\n\n               </div>\n               <div>\n                  <label htmlFor=\"range\">Range ({parseInt(this.state.options.range).toLocaleString()})</label>\n                  <input id=\"range\" onChange={this.handleFormChange} type=\"range\" min=\"1\" max={max} value={sliderVal} />\n               </div>\n               <div>\n                  <label htmlFor=\"mode\">Mode</label>\n                  <select id=\"mode\" onChange={this.handleFormChange} value={this.state.options.mode}>\n                     <option value=\"car\">Car</option>\n                     <option value=\"pedestrian\">Pedestrian</option>\n                  </select>\n               </div>\n               <div>\n                  <label htmlFor=\"traffic\">Traffic</label>\n                  <select id=\"traffic\" onChange={this.handleFormChange} value={this.state.options.traffic}>\n                     <option value=\"enabled\">Traffic Enabled</option>\n                     <option value=\"disabled\">Traffic Disabled</option>\n                  </select>\n               </div>\n               <div>\n                  <label htmlFor=\"zoom\">Zoom Level ({this.state.options.zoom})</label>\n                  <input id=\"zoom\" onChange={this.handleFormChange} type=\"range\" min=\"1\" max=\"16\" value={this.state.options.zoom} />\n               </div>\n               <div>\n                  <label htmlFor=\"style\">Map Style</label>\n                     <select id=\"style\" onChange={this.handleFormChange} value={this.state.options.style}>\n                        <option value=\"reduced.day\">Reduced Day </option>\n                        <option value=\"reduced.night\">Reduced Night</option>\n                        <option value=\"normal.day\">Normal Day</option>\n                        <option value=\"normal.night\">Normal Night</option>\n                     </select>\n               </div>\n            </div>\n            <div className=\"map-grid\">\n\n               {this.state.maps.map((map, index) =>\n                  <MapContainer\n                     key={index}\n                     index={index}\n                     center={map.coordinates}\n                     options={this.state.options}\n                     handleDrag={this.handleDrag}\n                     polygon={map.polygon}\n                     style={this.state.options.style}\n                  />\n               )}\n\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}